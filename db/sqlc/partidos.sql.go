// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: partidos.sql

package db

import (
	"context"
	"time"
)

const deletePartido = `-- name: DeletePartido :exec
DELETE FROM partido WHERE id_usuario = $1 AND id_partido = $2
`

type DeletePartidoParams struct {
	IDUsuario int32 `json:"id_usuario"`
	IDPartido int32 `json:"id_partido"`
}

func (q *Queries) DeletePartido(ctx context.Context, arg DeletePartidoParams) error {
	_, err := q.db.ExecContext(ctx, deletePartido, arg.IDUsuario, arg.IDPartido)
	return err
}

const getAllPartido = `-- name: GetAllPartido :many
SELECT id_partido, id_usuario, fecha, cancha, puntuacion FROM partido
`

func (q *Queries) GetAllPartido(ctx context.Context) ([]Partido, error) {
	rows, err := q.db.QueryContext(ctx, getAllPartido)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Partido
	for rows.Next() {
		var i Partido
		if err := rows.Scan(
			&i.IDPartido,
			&i.IDUsuario,
			&i.Fecha,
			&i.Cancha,
			&i.Puntuacion,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPartidoPorUsuario = `-- name: GetPartidoPorUsuario :one
SELECT id_partido, id_usuario, fecha, cancha, puntuacion FROM partido WHERE id_usuario = $1 AND id_partido = $2
`

type GetPartidoPorUsuarioParams struct {
	IDUsuario int32 `json:"id_usuario"`
	IDPartido int32 `json:"id_partido"`
}

func (q *Queries) GetPartidoPorUsuario(ctx context.Context, arg GetPartidoPorUsuarioParams) (Partido, error) {
	row := q.db.QueryRowContext(ctx, getPartidoPorUsuario, arg.IDUsuario, arg.IDPartido)
	var i Partido
	err := row.Scan(
		&i.IDPartido,
		&i.IDUsuario,
		&i.Fecha,
		&i.Cancha,
		&i.Puntuacion,
	)
	return i, err
}

const insertPartido = `-- name: InsertPartido :one
INSERT INTO partido(id_usuario, fecha, cancha, puntuacion) VALUES ($1, $2, $3, $4)
RETURNING id_partido, id_usuario, fecha, cancha, puntuacion
`

type InsertPartidoParams struct {
	IDUsuario  int32     `json:"id_usuario"`
	Fecha      time.Time `json:"fecha"`
	Cancha     string    `json:"cancha"`
	Puntuacion int32     `json:"puntuacion"`
}

func (q *Queries) InsertPartido(ctx context.Context, arg InsertPartidoParams) (Partido, error) {
	row := q.db.QueryRowContext(ctx, insertPartido,
		arg.IDUsuario,
		arg.Fecha,
		arg.Cancha,
		arg.Puntuacion,
	)
	var i Partido
	err := row.Scan(
		&i.IDPartido,
		&i.IDUsuario,
		&i.Fecha,
		&i.Cancha,
		&i.Puntuacion,
	)
	return i, err
}

const listPartidosPorUsuario = `-- name: ListPartidosPorUsuario :many
SELECT id_partido, id_usuario, fecha, cancha, puntuacion FROM partido WHERE id_usuario = $1
`

func (q *Queries) ListPartidosPorUsuario(ctx context.Context, idUsuario int32) ([]Partido, error) {
	rows, err := q.db.QueryContext(ctx, listPartidosPorUsuario, idUsuario)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Partido
	for rows.Next() {
		var i Partido
		if err := rows.Scan(
			&i.IDPartido,
			&i.IDUsuario,
			&i.Fecha,
			&i.Cancha,
			&i.Puntuacion,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePartido = `-- name: UpdatePartido :one
UPDATE partido SET fecha = $3, cancha=$4, puntuacion = $5
WHERE id_usuario = $1 AND id_partido = $2
RETURNING id_partido, id_usuario, fecha, cancha, puntuacion
`

type UpdatePartidoParams struct {
	IDUsuario  int32     `json:"id_usuario"`
	IDPartido  int32     `json:"id_partido"`
	Fecha      time.Time `json:"fecha"`
	Cancha     string    `json:"cancha"`
	Puntuacion int32     `json:"puntuacion"`
}

func (q *Queries) UpdatePartido(ctx context.Context, arg UpdatePartidoParams) (Partido, error) {
	row := q.db.QueryRowContext(ctx, updatePartido,
		arg.IDUsuario,
		arg.IDPartido,
		arg.Fecha,
		arg.Cancha,
		arg.Puntuacion,
	)
	var i Partido
	err := row.Scan(
		&i.IDPartido,
		&i.IDUsuario,
		&i.Fecha,
		&i.Cancha,
		&i.Puntuacion,
	)
	return i, err
}
