// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: estadistica_arquero.sql

package db

import (
	"context"
	"database/sql"
)

const deleteEstadisticaArquero = `-- name: DeleteEstadisticaArquero :exec
DELETE FROM Estadistica_Arquero WHERE id_usuario = $1 AND id_partido = $2
`

type DeleteEstadisticaArqueroParams struct {
	IDUsuario int32 `json:"id_usuario"`
	IDPartido int32 `json:"id_partido"`
}

func (q *Queries) DeleteEstadisticaArquero(ctx context.Context, arg DeleteEstadisticaArqueroParams) error {
	_, err := q.db.ExecContext(ctx, deleteEstadisticaArquero, arg.IDUsuario, arg.IDPartido)
	return err
}

const getEstadisticaArquero = `-- name: GetEstadisticaArquero :one
SELECT id_usuario, id_partido, goles_recibidos, atajadas_clave, saques_completados FROM Estadistica_Arquero WHERE id_usuario = $1 AND id_partido = $2
`

type GetEstadisticaArqueroParams struct {
	IDUsuario int32 `json:"id_usuario"`
	IDPartido int32 `json:"id_partido"`
}

func (q *Queries) GetEstadisticaArquero(ctx context.Context, arg GetEstadisticaArqueroParams) (EstadisticaArquero, error) {
	row := q.db.QueryRowContext(ctx, getEstadisticaArquero, arg.IDUsuario, arg.IDPartido)
	var i EstadisticaArquero
	err := row.Scan(
		&i.IDUsuario,
		&i.IDPartido,
		&i.GolesRecibidos,
		&i.AtajadasClave,
		&i.SaquesCompletados,
	)
	return i, err
}

const insertEstadisticaArquero = `-- name: InsertEstadisticaArquero :one
INSERT INTO Estadistica_Arquero(id_usuario, id_partido, goles_recibidos, atajadas_clave, saques_completados) VALUES ($1, $2, $3, $4, $5)
    RETURNING id_usuario, id_partido, goles_recibidos, atajadas_clave, saques_completados
`

type InsertEstadisticaArqueroParams struct {
	IDUsuario         int32          `json:"id_usuario"`
	IDPartido         int32          `json:"id_partido"`
	GolesRecibidos    int32          `json:"goles_recibidos"`
	AtajadasClave     int32          `json:"atajadas_clave"`
	SaquesCompletados sql.NullString `json:"saques_completados"`
}

func (q *Queries) InsertEstadisticaArquero(ctx context.Context, arg InsertEstadisticaArqueroParams) (EstadisticaArquero, error) {
	row := q.db.QueryRowContext(ctx, insertEstadisticaArquero,
		arg.IDUsuario,
		arg.IDPartido,
		arg.GolesRecibidos,
		arg.AtajadasClave,
		arg.SaquesCompletados,
	)
	var i EstadisticaArquero
	err := row.Scan(
		&i.IDUsuario,
		&i.IDPartido,
		&i.GolesRecibidos,
		&i.AtajadasClave,
		&i.SaquesCompletados,
	)
	return i, err
}

const updateEstadisticaArquero = `-- name: UpdateEstadisticaArquero :one
UPDATE Estadistica_Arquero SET goles_recibidos = $3, atajadas_clave= $4, saques_completados= $5
WHERE id_usuario = $1 AND id_partido = $2
RETURNING id_usuario, id_partido, goles_recibidos, atajadas_clave, saques_completados
`

type UpdateEstadisticaArqueroParams struct {
	IDUsuario         int32          `json:"id_usuario"`
	IDPartido         int32          `json:"id_partido"`
	GolesRecibidos    int32          `json:"goles_recibidos"`
	AtajadasClave     int32          `json:"atajadas_clave"`
	SaquesCompletados sql.NullString `json:"saques_completados"`
}

func (q *Queries) UpdateEstadisticaArquero(ctx context.Context, arg UpdateEstadisticaArqueroParams) (EstadisticaArquero, error) {
	row := q.db.QueryRowContext(ctx, updateEstadisticaArquero,
		arg.IDUsuario,
		arg.IDPartido,
		arg.GolesRecibidos,
		arg.AtajadasClave,
		arg.SaquesCompletados,
	)
	var i EstadisticaArquero
	err := row.Scan(
		&i.IDUsuario,
		&i.IDPartido,
		&i.GolesRecibidos,
		&i.AtajadasClave,
		&i.SaquesCompletados,
	)
	return i, err
}
