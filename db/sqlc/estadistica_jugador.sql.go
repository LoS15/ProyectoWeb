// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: estadistica_jugador.sql

package db

import (
	"context"
	"database/sql"
)

const deleteEstadisticaJugador = `-- name: DeleteEstadisticaJugador :exec
DELETE FROM Estadistica_Jugador WHERE id_usuario = $1 AND id_partido = $2
`

type DeleteEstadisticaJugadorParams struct {
	IDUsuario int32 `json:"id_usuario"`
	IDPartido int32 `json:"id_partido"`
}

func (q *Queries) DeleteEstadisticaJugador(ctx context.Context, arg DeleteEstadisticaJugadorParams) error {
	_, err := q.db.ExecContext(ctx, deleteEstadisticaJugador, arg.IDUsuario, arg.IDPartido)
	return err
}

const getEstadisticaJugador = `-- name: GetEstadisticaJugador :one
SELECT id_usuario, id_partido, goles, asistencias, pases_completados, duelos_ganados FROM Estadistica_Jugador WHERE id_usuario = $1 AND id_partido = $2
`

type GetEstadisticaJugadorParams struct {
	IDUsuario int32 `json:"id_usuario"`
	IDPartido int32 `json:"id_partido"`
}

func (q *Queries) GetEstadisticaJugador(ctx context.Context, arg GetEstadisticaJugadorParams) (EstadisticaJugador, error) {
	row := q.db.QueryRowContext(ctx, getEstadisticaJugador, arg.IDUsuario, arg.IDPartido)
	var i EstadisticaJugador
	err := row.Scan(
		&i.IDUsuario,
		&i.IDPartido,
		&i.Goles,
		&i.Asistencias,
		&i.PasesCompletados,
		&i.DuelosGanados,
	)
	return i, err
}

const insertEstadisticaJugador = `-- name: InsertEstadisticaJugador :one
INSERT INTO Estadistica_Jugador(id_usuario, id_partido, goles, asistencias, pases_completados, duelos_ganados) VALUES ($1, $2, $3, $4, $5, $6)
    RETURNING id_usuario, id_partido, goles, asistencias, pases_completados, duelos_ganados
`

type InsertEstadisticaJugadorParams struct {
	IDUsuario        int32          `json:"id_usuario"`
	IDPartido        int32          `json:"id_partido"`
	Goles            int32          `json:"goles"`
	Asistencias      int32          `json:"asistencias"`
	PasesCompletados sql.NullString `json:"pases_completados"`
	DuelosGanados    sql.NullString `json:"duelos_ganados"`
}

func (q *Queries) InsertEstadisticaJugador(ctx context.Context, arg InsertEstadisticaJugadorParams) (EstadisticaJugador, error) {
	row := q.db.QueryRowContext(ctx, insertEstadisticaJugador,
		arg.IDUsuario,
		arg.IDPartido,
		arg.Goles,
		arg.Asistencias,
		arg.PasesCompletados,
		arg.DuelosGanados,
	)
	var i EstadisticaJugador
	err := row.Scan(
		&i.IDUsuario,
		&i.IDPartido,
		&i.Goles,
		&i.Asistencias,
		&i.PasesCompletados,
		&i.DuelosGanados,
	)
	return i, err
}

const updateEstadisticaJugador = `-- name: UpdateEstadisticaJugador :one
UPDATE Estadistica_Jugador SET goles = $3, asistencias= $4, pases_completados= $5, duelos_ganados= $6
WHERE id_usuario = $1 AND id_partido = $2
RETURNING id_usuario, id_partido, goles, asistencias, pases_completados, duelos_ganados
`

type UpdateEstadisticaJugadorParams struct {
	IDUsuario        int32          `json:"id_usuario"`
	IDPartido        int32          `json:"id_partido"`
	Goles            int32          `json:"goles"`
	Asistencias      int32          `json:"asistencias"`
	PasesCompletados sql.NullString `json:"pases_completados"`
	DuelosGanados    sql.NullString `json:"duelos_ganados"`
}

func (q *Queries) UpdateEstadisticaJugador(ctx context.Context, arg UpdateEstadisticaJugadorParams) (EstadisticaJugador, error) {
	row := q.db.QueryRowContext(ctx, updateEstadisticaJugador,
		arg.IDUsuario,
		arg.IDPartido,
		arg.Goles,
		arg.Asistencias,
		arg.PasesCompletados,
		arg.DuelosGanados,
	)
	var i EstadisticaJugador
	err := row.Scan(
		&i.IDUsuario,
		&i.IDPartido,
		&i.Goles,
		&i.Asistencias,
		&i.PasesCompletados,
		&i.DuelosGanados,
	)
	return i, err
}
